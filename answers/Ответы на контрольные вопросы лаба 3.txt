1. Дайте определение абстрактного метода и абстрактного класса

Абстрактный метод — это метод, который объявляется с ключевым словом abstract и не имеет тела (реализации). Его реализация должна быть предоставлена в подклассах или классах, реализующих интерфейс. Например, в методическом материале абстрактный метод voice() в классе Pet не имеет тела и реализуется в наследниках Snake и Dog.

Абстрактный класс — это класс, который объявлен с ключевым словом abstract и содержит хотя бы один абстрактный метод (хотя может не содержать их вовсе). Такой класс не может быть инстанцирован напрямую (то есть нельзя создать объект с помощью new), а служит шаблоном для наследников, которые обязаны реализовать все его абстрактные методы. Пример из материала: abstract class Pet с абстрактным методом voice().

2. Можно ли создать объект абстрактного класса?

Нет, объект абстрактного класса создать нельзя. В Java это запрещено, так как абстрактный класс считается незавершённым — он содержит абстрактные методы без реализации. Например, в коде из материала попытка создать объект Pet zorka = new Pet(); приводит к ошибке компиляции. Чтобы использовать функциональность абстрактного класса, нужно создать подкласс (например, Snake или Dog), реализовать все абстрактные методы и затем создать объект этого подкласса.

3. Запишите шаблон объявления интерфейса

Шаблон объявления интерфейса в Java выглядит следующим образом:

[public] interface InterfaceName [extends Interface1] {
    // абстрактные методы (public abstract по умолчанию)
    // константные поля (public static final по умолчанию)
}

public — необязательный модификатор доступа (если не указан, интерфейс доступен в пределах пакета).
InterfaceName — имя интерфейса.
extends Interface1 — опциональное наследование другого интерфейса (интерфейсы могут наследовать друг друга).

Внутри {} указываются только абстрактные методы и константные поля. Пример из материала: interface Pet { abstract void voice(); }.

4. В чём отличие интерфейса от абстрактного класса, какими общими свойствами они обладают?

Отличия:

1) Содержимое:
- Интерфейс (до Java 8) содержит только абстрактные методы и константные поля (public static final). Например, интерфейс Pet содержит только метод voice() и константу hungry.
- Абстрактный класс может содержать как абстрактные методы, так и методы с реализацией, а также поля любого типа. Например, abstract class Pet имеет абстрактный метод voice() и конкретный метод food().
2) Наследование:
- Класс может реализовывать несколько интерфейсов одновременно (например, Pickup implements CargoAuto, PassangersAuto).
- Класс может наследовать только один абстрактный класс (множественное наследование классов в Java невозможно).

Общие свойства:
- Нельзя создать объект: ни интерфейс, ни абстрактный класс не могут быть инстанцированы напрямую.
- Контракт: оба используются для определения контракта, который должен быть реализован подклассами или классами, реализующими интерфейс. Например, и Pet как интерфейс, и Pet как абстрактный класс задают метод voice(), который реализуется в наследниках.

5. Приведите пример интерфейса и реализующих его классов

Вот пример на основе материала:

// Объявление интерфейса
public interface Pet {
    void voice(); // абстрактный метод
}

// Класс, реализующий интерфейс
public class Snake implements Pet {
    public void voice() {
        System.out.println("Шшш-ш-ш"); // реализация метода
    }
}

// Ещё один класс, реализующий интерфейс
public class Dog implements Pet {
    public void voice() {
        System.out.println("Гав-гав"); // реализация метода
    }
}

// Главный класс для демонстрации
public class Main {
    public static void main(String[] args) {
        Snake snake = new Snake();
        Dog dog = new Dog();
        snake.voice(); // Вывод: Шшш-ш-ш
        dog.voice();   // Вывод: Гав-гав
    }
}

В этом примере интерфейс Pet определяет метод voice(), а классы Snake и Dog реализуют его по-разному, демонстрируя полиморфизм.

6. Что в Java заменяет механизм множественного наследования?

В Java механизм множественного наследования (как в C++) отсутствует, но его заменяет механизм интерфейсов. Класс может реализовывать несколько интерфейсов одновременно, что позволяет ему унаследовать поведение от разных источников. Например, в материале класс Pickup реализует два интерфейса — CargoAuto и PassangersAuto:

class Pickup implements CargoAuto, PassangersAuto {
    public void transportCargo() {
        System.out.println("Везу груз");
    }
    public void transportPassangers() {
        System.out.println("Везу пассажиров");
    }
}

Это компенсирует отсутствие множественного наследования классов.

7. Какие недостатки имеет механизм интерфейсов?

Механизм интерфейсов имеет следующие недостатки:

1) Ограничение полиморфизма при конфликте методов: если класс реализует несколько интерфейсов, в которых есть методы с одинаковыми именами, он обязан предоставить одну общую реализацию для всех этих методов. Это ограничивает возможность иметь разные реализации для каждого интерфейса. Пример из материала:

interface Interface1 {
    String someMethod();
}
interface Interface2 {
    String someMethod();
}
class SomeClass implements Interface1, Interface2 {
    public String someMethod() {
        return "It Works"; // Одна реализация для обоих интерфейсов
    }
}

2) Дублирование кода: интерфейсы не могут содержать реализацию методов (до Java 8), что может приводить к необходимости дублировать код в классах, реализующих один и тот же интерфейс.