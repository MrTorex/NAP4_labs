1. Что такое конструктор?

Конструктор — это специальный метод класса, который вызывается автоматически при создании нового объекта этого класса. Основная задача конструктора — инициализация полей объекта, то есть присвоение им начальных значений. Конструктор имеет то же имя, что и класс, и не имеет возвращаемого типа (даже void).

Пример:

public class Film {
    private String title;
    private int views;

    // Конструктор
    public Film(String title, int views) {
        this.title = title;
        this.views = views;
    }
}

В этом примере конструктор инициализирует поля title и views объекта класса Film.

2. Чем конструктор отличается от метода?

Конструктор отличается от метода следующими особенностями:

- Имя: Конструктор всегда имеет имя, совпадающее с именем класса, а метод может иметь любое имя.

- Возвращаемое значение: Конструктор не имеет возвращаемого типа (даже void), а метод всегда имеет возвращаемый тип (или void, если ничего не возвращает).

- Вызов: Конструктор вызывается автоматически при создании объекта с помощью оператора new, а метод вызывается явно через объект или класс (если метод статический).

- Назначение: Конструктор используется для инициализации объекта, а метод — для выполнения определённых действий.

Пример:

public class Film {
    private String title;

    // Конструктор
    public Film(String title) {
        this.title = title;
    }

    // Метод
    public void printTitle() {
        System.out.println(this.title);
    }
}

3. Как создать массив объектов?

Массив объектов создаётся в два этапа:

1) Создаётся массив ссылок на объекты.

2) Для каждого элемента массива создаётся объект с помощью конструктора.

Пример:

Film[] films = new Film[3]; // Создаём массив на 3 элемента
films[0] = new Film("Avatar", 1000); // Создаём объект и помещаем его в массив
films[1] = new Film("Inception", 800);
films[2] = new Film("Interstellar", 1200);

Также можно использовать список инициализации:

Film[] films = {
    new Film("Avatar", 1000),
    new Film("Inception", 800),
    new Film("Interstellar", 1200)
};

4. Для чего нужен оператор new?

Оператор new используется для создания нового объекта класса. Он выполняет следующие действия:

- Выделяет память для объекта.

- Вызывает конструктор класса для инициализации объекта.

- Возвращает ссылку на созданный объект.

Пример:

Film film = new Film("Avatar", 1000);
Здесь оператор new создаёт объект класса Film и вызывает конструктор с параметрами "Avatar" и 1000.

5. Для чего используются пакеты?

Пакеты в Java используются для:

- Организации кода: Пакеты помогают структурировать классы по логическим группам (например, по функциональности или принадлежности к определённому модулю).

- Управления доступом: Пакеты позволяют контролировать видимость классов и методов с помощью модификаторов доступа (public, protected, private, default).

- Избежания конфликтов имён: Пакеты позволяют использовать одинаковые имена классов в разных пакетах.

Пример:

package com.example.movies;

public class Film {
    // Класс Film находится в пакете com.example.movies
}

6. Какие бывают конструкторы?

В Java существуют следующие типы конструкторов:

1) Конструктор по умолчанию: Создаётся автоматически, если в классе не определён ни один конструктор. Не имеет параметров и инициализирует поля значениями по умолчанию.

public class Film {
    public Film() {
        // Конструктор по умолчанию
    }
}

2) Конструктор с параметрами: Принимает параметры и инициализирует поля объекта.

public class Film {
    private String title;
    public Film(String title) {
        this.title = title;
    }
}

3) Конструктор копирования: Принимает объект того же класса и копирует его поля в новый объект.

public class Film {
    private String title;
    public Film(Film other) {
        this.title = other.title;
    }
}

4) Перегруженные конструкторы: В одном классе может быть несколько конструкторов с разными параметрами.

public class Film {
    private String title;
    private int views;

    public Film(String title) {
        this.title = title;
    }

    public Film(String title, int views) {
        this.title = title;
        this.views = views;
    }
}

7. Как вызвать статистический метод?

Статический метод вызывается через имя класса, а не через объект. Для этого используется синтаксис:

ClassName.methodName();

Пример:

public class MathUtils {
    public static int add(int a, int b) {
        return a + b;
    }
}

// Вызов статического метода
int result = MathUtils.add(5, 3);

Статические методы могут работать только с статическими полями и методами, так как они не привязаны к конкретному объекту.